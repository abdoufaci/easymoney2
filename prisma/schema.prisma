// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum VerificationStatus {
  NOT_VERIFIED
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 Json?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  phone                 String?
  country               String?
  dateOfBirth           DateTime?
  city                  String?
  zipCode               String?
  adress                String?
  isActive              Boolean                @default(false)
  VerificationStatus    VerificationStatus     @default(NOT_VERIFIED)
  documents             Json?
  studentNumber         String?                @unique
  sessions              Int                    @default(0)

  progress VideoProgress[]
  courses  Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Section {
  id    String @id @default(uuid())
  title String

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id           String  @id @default(uuid())
  englishTitle String
  arabicTitle  String
  englishDesc  String
  arabicDesc   String
  image        Json
  priceInEuro  String
  priceInDa    String
  isActive     Boolean @default(false)
  hours        String  @default("13h")

  videos   Video[]
  students User[]

  sectionId String
  Section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id           String @id @default(uuid())
  englishTitle String
  arabicTitle  String
  videoId      String

  progress VideoProgress[]

  courseId String
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoProgress {
  id String @id @default(uuid())

  videoId String
  Video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
