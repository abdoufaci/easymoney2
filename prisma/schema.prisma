// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum VerificationStatus {
  NOT_VERIFIED
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 Json?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  phone                 String?
  country               String?
  dateOfBirth           DateTime?
  city                  String?
  zipCode               String?
  adress                String?
  isActive              Boolean                @default(false)
  VerificationStatus    VerificationStatus     @default(NOT_VERIFIED)
  documents             Json?
  studentNumber         String?                @unique
  sessions              Int                    @default(0)
  mobileSessions        Int                    @default(0)
  mobileToken           String?
  becomeStudent         DateTime?
  lastMessage           DateTime               @default(now())

  progress            VideoProgress[]
  courses             Course[]
  groupMessages       GroupMessage[]   @relation(name: "groupSender")
  groupMessagesSeen   GroupMessage[]   @relation(name: "groupSeen")
  groups              Group[]
  supportMessages     SupportMessage[] @relation(name: "supportSender")
  supportMessagesSeen SupportMessage[] @relation(name: "supportSeen")
  SupportGroup        SupportGroup[]
  directMessagesSeen  DirectMessage[]  @relation("directSeen")
  directMessages      DirectMessage[]  @relation("directSender")
  directGroups        DirectGroup[]
  payments            Payment[]
  waitList            WaitList[]
  comments            Comment[]        @relation(name: "commentSender")
  reactedComments     Comment[]        @relation(name: "commentReactors")

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  mobileLastAction DateTime @default(now()) @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Section {
  id     String  @id @default(uuid())
  title  String
  isMain Boolean @default(false)

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id           String  @id @default(uuid())
  englishTitle String
  arabicTitle  String
  englishDesc  String
  arabicDesc   String
  image        Json
  priceInEuro  String
  priceInDa    String
  isActive     Boolean @default(false)

  videos   Video[]
  students User[]
  payments Payment[]

  sectionId String
  Section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id           String @id @default(uuid())
  englishTitle String
  arabicTitle  String
  videoId      String

  progress VideoProgress[]
  comments Comment[]

  courseId String
  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoProgress {
  id String @id @default(uuid())

  videoId String
  Video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(uuid())

  comment String @db.Text

  replies Comment[] @relation(name: "comment")

  reactors User[] @relation(name: "commentReactors")

  commentId String?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, name: "comment")

  videoId String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "commentSender")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id String @id @default(uuid())

  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GroupStatus {
  OPEN
  PRIVATE
  CLOSED
}

model Group {
  id String @id @default(uuid())

  name   String
  status GroupStatus @default(OPEN)

  members  User[]
  messages GroupMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  AUDIO
}

model GroupMessage {
  id String @id @default(uuid())

  message  String?
  file     Json?
  type     MessageType @default(TEXT)
  isPinned Boolean     @default(false)

  seenBy User[] @relation(name: "groupSeen")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "groupSender")

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupportGroup {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages SupportMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupportMessage {
  id String @id @default(uuid())

  message  String?
  file     Json?
  type     MessageType @default(TEXT)
  isPinned Boolean     @default(false)

  seenBy User[] @relation(name: "supportSeen")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "supportSender")

  supportGroupId String
  SupportGroup   SupportGroup @relation(fields: [supportGroupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectGroup {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectMessage {
  id String @id @default(uuid())

  message  String?
  file     Json?
  type     MessageType @default(TEXT)
  isPinned Boolean     @default(false)

  seenBy User[] @relation(name: "directSeen")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, name: "directSender")

  directGroupId String?
  directGroup   DirectGroup? @relation(fields: [directGroupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  COURSE
  FOLLOWUP
  BOTH
}

model Payment {
  id String @id @default(uuid())

  paymentId String        @unique
  price     String
  status    PaymentStatus

  courses Course[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WaitList {
  id String @id @default(uuid())

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestimonyGroup {
  id    String @id @default(uuid())
  title String

  testemonies Testimony[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimony {
  id    String @id @default(uuid())
  video Json

  testimonyGroupId String
  TestimonyGroup   TestimonyGroup @relation(fields: [testimonyGroupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
